{"version":3,"sources":["serviceWorker.js","components/navbar.jsx","components/hello.jsx","Counters.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Navbar","totalCounter","Fragment","className","href","Hello","getFade","a","props","tags","count","getBadgeClasses","countFormat","this","style","fontSize","onClick","onIncrement","onDecrement","disabled","onDelete","id","Component","Counters","onReset","map","tag","key","App","state","handleIncrement","index","indexOf","setState","handleDelete","counterId","deleteCounter","filter","handleReset","counting","counter","handleDecrement","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9c402e4b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\n\nconst Navbar = ({ totalCounter }) => {\n    return (\n      <React.Fragment>\n        <nav className=\"navbar navbar-light bg-light\">\n          <a className=\"navbar-brand\" href=\"/\">\n            Navbar{\" \"}\n            <span className=\"badge badge-pill badge-secondary\">\n              {totalCounter}\n            </span>\n          </a>\n        </nav>\n      </React.Fragment>\n    );\n}\n \nexport default Navbar;\n\n\n","import React, { Component } from \"react\";\n\nclass Hello extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col-1 mr-5\">\n          <span className={this.getBadgeClasses()}>{this.countFormat()}</span>\n          </div>\n          <div className=\"col\">\n          <button\n            className=\"btn btn-sm mr-2 font-weight-bold btn-secondary\"\n            style={{ fontSize: 15 }}\n            onClick={() => this.props.onIncrement(this.props.tags)}\n          >\n            +\n          </button>\n          <button\n            style={{ fontSize: 15 }}\n            className={this.getFade()}\n            onClick={() => {\n              this.props.onDecrement(this.props.tags);\n            }}\n              disabled={this.props.tags.count === 0 ? true : false}\n          >\n            -\n          </button>\n          <button\n            onClick={() => {\n              this.props.onDelete(this.props.tags.id);\n            }}\n            className=\"btn btn-danger btn-sm\"\n          >\n            x\n          </button>\n          </div>\n\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  getFade = () => {\n    let a = \"btn btn-sm m-3 font-weight-bold btn-\";\n    a += this.props.tags.count === 0 ? \"light\" : \"secondary\";\n    return a;\n  };\n\n  getBadgeClasses = () => {\n    let a = \"badge m-3 p-2 badge-\";\n    a += this.props.tags.count === 0 ? \"warning\" : \"primary\";\n    return a;\n  };\n\n  countFormat = () => {\n    const { count } = this.props.tags;\n    return count === 0 ? \"zero\" : count;\n  };\n}\n\nexport default Hello;\n","import React, { Component } from \"react\";\n\nimport Counter from \"./components/hello\";\n\nclass Counters extends Component {\n  render() {\n    const {tags, onReset, onDelete, onIncrement, onDecrement} = this.props\n    return (\n      <div>\n        \n          <button\n            onClick={onReset}\n            className=\"btn m-2 btn-primary btn-sm\"\n          >\n            Reset\n          </button>\n\n          {tags.map(tag => (\n            <Counter\n              key={tag.id}\n              tags={tag}\n              onDelete={onDelete}\n              onIncrement={onIncrement}\n              onDecrement={onDecrement}\n            ></Counter>\n          ))}\n       \n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/navbar\";\nimport Counters from \"./Counters\";\n\nclass App extends Component {\n  state = {\n    tags: [\n      { id: 1, count: 5 },\n      { id: 2, count: 1 },\n      { id: 3, count: 3 }\n    ]\n  };\n\n  handleIncrement = tag => {\n    const tags = [...this.state.tags];\n    const index = tags.indexOf(tag);\n\n    tags[index].count++;\n    this.setState({ tags: tags });\n  };\n\n  handleDelete = counterId => {\n    const deleteCounter = this.state.tags.filter(\n      count => count.id !== counterId\n    );\n    this.setState({ tags: deleteCounter });\n  };\n\n  handleReset = () => {\n    const counting = this.state.tags.map(counter => {\n      counter.count = 0;\n      return counter;\n    });\n    this.setState({ count: counting });\n  };\n\n  handleDecrement = tag => {\n    const tags = [...this.state.tags];\n    const index = tags.indexOf(tag);\n  \n    tags[index].count <= 0 ? this.setState({ count: 0 }) : tags[index].count--;\n    \n    this.setState({ tags: tags });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar\n          totalCounter={this.state.tags.filter(tag => tag.count > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n            onDecrement={this.handleDecrement}\n            onReset={this.handleReset}\n            tags={this.state.tags}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}