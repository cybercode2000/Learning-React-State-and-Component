{"ast":null,"code":"var _jsxFileName = \"/home/cybercode2000/july/learning-react/secondap/src/components/hello.jsx\";\nimport React, { Component } from \"react\";\n\nclass Hello extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tags: [{\n        id: 1,\n        count: 0\n      }, {\n        id: 2,\n        count: 0\n      }, {\n        id: 3,\n        count: 0\n      }]\n    };\n\n    this.renderTags = () => {};\n\n    this.countFormat = id => {\n      console.log(id); // const tag = this.state.tags.find(a => id === a.id);\n      //     const count = tag.count;\n      //     return count === 0 ? \"zero\" : count;\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 7\n      }\n    }, this.state.tags.map(a => /*#__PURE__*/React.createElement(\"div\", {\n      key: a.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }\n    }, \" \", () => {\n      this.countFormat(a.id);\n    }, \" \"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-sm font-weight-bold btn-success\",\n      style: {\n        fontSize: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }\n    }, \" \", \"+\"), /*#__PURE__*/React.createElement(\"button\", {\n      style: {\n        fontSize: 20\n      },\n      className: \"btn btn-sm m-3 font-weight-bold btn-danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }\n    }, \"-\"))));\n  } // handleIncrement = () => {\n  //   this.setState({ count: this.state.count + 1 });\n  // };\n  // handleDecrement = () => {\n  //   this.state.count <= 0\n  //     ? this.setState({ count: 0 })\n  //     : this.setState({ count: this.state.count - 1 });\n  // };\n  // getBadgeClasses = (id) => {\n  //   const tag = this.state.tags.find(a => id === a.id);\n  //   const count = tag.count;\n  //   let a = \"badge m-3 badge-\";\n  //   a += count === 0 ? \"warning\" : \"primary\";\n  //   return a;\n  // };\n\n\n}\n\nexport default Hello;","map":{"version":3,"sources":["/home/cybercode2000/july/learning-react/secondap/src/components/hello.jsx"],"names":["React","Component","Hello","state","tags","id","count","renderTags","countFormat","console","log","render","map","a","fontSize"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,KAAN,SAAoBD,SAApB,CAA8B;AAAA;AAAA;AAAA,SAC5BE,KAD4B,GACpB;AACNC,MAAAA,IAAI,EAAE,CAAC;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,KAAK,EAAE;AAAhB,OAAD,EAAsB;AAAED,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,KAAK,EAAE;AAAhB,OAAtB,EAA2C;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,KAAK,EAAE;AAAf,OAA3C;AADA,KADoB;;AAAA,SAK5BC,UAL4B,GAKf,MAAM,CAAE,CALO;;AAAA,SAkD5BC,WAlD4B,GAkDbH,EAAD,IAAQ;AACpBI,MAAAA,OAAO,CAACC,GAAR,CAAYL,EAAZ,EADoB,CAExB;AAEA;AACA;AACG,KAxD2B;AAAA;;AAO5BM,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKR,KAAL,CAAWC,IAAX,CAAgBQ,GAAhB,CAAoBC,CAAC,iBACpB;AAAK,MAAA,GAAG,EAAEA,CAAC,CAACR,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAQ,MAAM;AAAE,WAAKG,WAAL,CAAiBK,CAAC,CAACR,EAAnB;AAAwB,KAAxC,MADF,eAEE;AACE,MAAA,SAAS,EAAC,yCADZ;AAEE,MAAA,KAAK,EAAE;AAAES,QAAAA,QAAQ,EAAE;AAAZ,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIG,GAJH,MAFF,eASE;AACE,MAAA,KAAK,EAAE;AAAEA,QAAAA,QAAQ,EAAE;AAAZ,OADT;AAC0B,MAAA,SAAS,EAAC,4CADpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WATF,CADD,CADH,CADF;AAoBD,GA5B2B,CA8B5B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AA/C4B;;AA2D9B,eAAeZ,KAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass Hello extends Component {\n  state = {\n    tags: [{ id: 1, count: 0 }, { id: 2, count: 0 }, {id: 3, count: 0 }]\n  };\n\n  renderTags = () => {};\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.state.tags.map(a => (\n          <div key={a.id}>\n            <span> {() => { this.countFormat(a.id) } } </span>\n            <button \n              className=\"btn btn-sm font-weight-bold btn-success\"\n              style={{ fontSize: 20 }}\n            >\n              {\" \"}\n              +\n            </button>\n            <button\n              style={{ fontSize: 20 }}className=\"btn btn-sm m-3 font-weight-bold\n              btn-danger\" >-\n            </button>\n          </div>\n        ))}\n      </React.Fragment>\n    );\n  }\n\n  // handleIncrement = () => {\n  //   this.setState({ count: this.state.count + 1 });\n  // };\n\n  // handleDecrement = () => {\n  //   this.state.count <= 0\n  //     ? this.setState({ count: 0 })\n  //     : this.setState({ count: this.state.count - 1 });\n  // };\n\n  // getBadgeClasses = (id) => {\n  //   const tag = this.state.tags.find(a => id === a.id);\n\n  //   const count = tag.count;\n  //   let a = \"badge m-3 badge-\";\n  //   a += count === 0 ? \"warning\" : \"primary\";\n  //   return a;\n  // };\n\n\n  countFormat = (id) => {\n    console.log(id);\n// const tag = this.state.tags.find(a => id === a.id);\n    \n//     const count = tag.count;\n//     return count === 0 ? \"zero\" : count;\n  };\n}\n\nexport default Hello;\n"]},"metadata":{},"sourceType":"module"}